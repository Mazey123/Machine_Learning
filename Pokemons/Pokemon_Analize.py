# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15EcRIV_yHhK6NqEQZ9ePw45kGqdtPcH4
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
import numpy as np

# Загрузка данных
df = pd.read_csv("pokemon.csv")
# Смотрю какие есть столбцы
print(df.columns)
# Просмотр общей информации о данных
print(df.info())
# Просмотр статистик по числовым столбцам
print(df.describe())
# Проверка на пропущенные значения
print(df.isnull().sum())
# Заполнение пропущенных значений (если необходимо)
df.fillna(0, inplace=True)

# Расчет суммы базовых характеристик (BST - Base Stat Total)
df["BST"] = df["hp"] + df["attack"] + df["defense"] + df["sp_attack"] + df["sp_defense"] + df["speed"]

# Создаем словарь с максимальными значениями характеристик
max_stats = {
    "HP": df.loc[df["hp"].idxmax()],
    "Attack": df.loc[df["attack"].idxmax()],
    "Defense": df.loc[df["defense"].idxmax()],
    "Sp. Attack": df.loc[df["sp_attack"].idxmax()],
    "Sp. Defense": df.loc[df["sp_defense"].idxmax()],
    "Speed": df.loc[df["speed"].idxmax()],
    "Weight": df.loc[df["weight_kg"].idxmax()],
}

# Преобразуем словарь в DataFrame
max_stats_df = pd.DataFrame.from_dict(max_stats, orient="index")[
    ["name", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed", "weight_kg", "type1", "type2", "generation", "is_legendary"]
]
print("Самые-самые покемоны по характеристикам:\n", max_stats_df)

# Визуализация
plt.figure(figsize=(15, 10))
for i, (stat, row) in enumerate(max_stats.items()):
    plt.subplot(3, 3, i + 1)
    sns.barplot(x=[stat], y=[row[stat.lower().replace(". ", "_").replace("weight", "weight_kg")]], hue=[stat], palette="Set2", legend=False)
    plt.title(f"Максимальное значение: {stat}")
    plt.ylabel("Значение")
    plt.xlabel("")
    plt.text(0, row[stat.lower().replace(". ", "_").replace("weight", "weight_kg")] / 2, f"{row['name']}\n({row[stat.lower().replace('. ', '_').replace('weight', 'weight_kg')]})", ha="center", color="white", fontsize=10)
plt.tight_layout()
plt.suptitle("Покемоны с максимальными характеристиками", y=1.02, fontsize=16)
plt.show()

"""**Выводы:**
- Покемоны с наибольшими характеристиками варьируются по типам и поколениям, но среди них часто встречаются легендарные покемоны, такие как Mewtwo и Deoxys.
- Блессей (Blissey) имеет максимальный показатель HP, но её атака и защита оставляют желать лучшего.
- Среди самых сильных по атаке и защите выделяются такие покемоны, как Heracross и Steelix.
- Легендарные покемоны часто лидируют по Sp. Attack и скорости, например, Mewtwo и Deoxys.

"""

# ---2. Сильнейшие покемоны каждого поколения---
strongest_per_gen = df.loc[df.groupby("generation")["BST"].idxmax(),
                           ["pokedex_number", "name", "BST", "hp", "attack", "defense", "sp_attack", "sp_defense", "speed",
                            "type1", "type2", "generation", "is_legendary"]]
print("Сильнейшие покемоны каждого поколения:\n", strongest_per_gen)

# Увеличиваем размер графика
plt.figure(figsize=(15, 8))  # Ширина: 15, высота: 8

# График сильнейших покемонов по поколениям
ax = sns.barplot(data=strongest_per_gen, x="generation", y="BST", hue="generation", palette="viridis", legend=False)
plt.title("Сильнейшие покемоны каждого поколения", fontsize=16)
plt.xlabel("Поколение", fontsize=14)
plt.ylabel("Сумма базовых характеристик (BST)", fontsize=14)
plt.xticks(fontsize=12)  # Размер шрифта для меток по оси X
plt.yticks(fontsize=12)  # Размер шрифта для меток по оси Y

# Добавляем имена покемонов на столбцы
for i, bar in enumerate(ax.patches):  # Перебираем все столбцы на графике
    height = bar.get_height()  # Высота столбца (значение BST)
    x = bar.get_x() + bar.get_width() / 2  # Центр столбца по оси X
    y = height / 2  # Позиция по оси Y (середина столбца)
    name = strongest_per_gen.iloc[i]["name"]  # Имя покемона
    bst = strongest_per_gen.iloc[i]["BST"]  # Значение BST
    ax.text(
        x,  # Позиция по оси X (центр столбца)
        y,  # Позиция по оси Y (середина столбца)
        f"{name}\n({bst})",  # Текст: имя и BST
        ha="center",  # Горизонтальное выравнивание по центру
        fontsize=10,  # Размер шрифта
        color="white",  # Цвет текста (белый для лучшей читаемости)
        weight="bold"  # Жирный шрифт
    )

plt.tight_layout()  # Автоматическая настройка отступов
plt.show()

"""**Выводы:**
- В каждом поколении лидируют покемоны с высокими значениями BST, при этом большинство из них — легендарные.
- Исключение составляют покемоны, как Tyranitar из 2-го поколения, который, несмотря на отсутствие легендарности, обладает высоким BST.
- У всех сильнейших покемонов — сбалансированные характеристики, что делает их универсальными для боя.

"""

# ---3. Насколько легендарные покемоны сильнее---
legendary_stats = df[df["is_legendary"] == 1]["BST"].mean()
non_legendary_stats = df[df["is_legendary"] == 0]["BST"].mean()
print(f"Средняя сила легендарных покемонов: {legendary_stats}")
print(f"Средняя сила обычных покемонов: {non_legendary_stats}")

# Средние характеристики по поколениям
bst_by_generation = df.groupby(["generation", "is_legendary"])["BST"].mean().unstack()
print("Средняя сила по поколениям:\n", bst_by_generation)

# Средние характеристики по типам
bst_by_type = df.groupby(["type1", "is_legendary"])["BST"].mean().unstack()
print("Средняя сила по типам:\n", bst_by_type)

# График разницы силы между легендарными и обычными покемонами
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x="is_legendary", y="BST", hue="is_legendary", palette="Set2", legend=False)
plt.title("Распределение силы (BST) для легендарных и обычных покемонов")
plt.xlabel("Легендарные покемоны (1) / Обычные покемоны (0)")
plt.ylabel("Сумма базовых характеристик (BST)")
plt.xticks([0, 1], ["Обычные", "Легендарные"])
plt.show()

# График средней силы по поколениям
plt.figure(figsize=(12, 7))
sns.lineplot(data=bst_by_generation)
plt.title("Средняя сила покемонов по поколениям")
plt.xlabel("Поколение")
plt.ylabel("Средний BST")
plt.legend(["Обычные покемоны", "Легендарные покемоны"])
plt.show()

"""**Выводы:**
- Легендарные покемоны имеют значительно более высокие средние показатели BST ~615 по сравнению с обычными покемонами ~410.
- Легендарные покемоны часто имеют сбалансированные характеристики и чаще всего обладают уникальными способностями и сильными атаками.
- В 3-м и 6-м поколениях легендарные покемоны показывают наибольшие значения BST.
"""

# ---4. Среди покемонов каких типов больше всего легендарных---
legendary_by_type = df[df["is_legendary"] == 1]["type1"].value_counts()
print("Количество легендарных покемонов по типам:\n", legendary_by_type)

# График количества легендарных покемонов по типам
plt.figure(figsize=(12, 7))
sns.barplot(x=legendary_by_type.index, y=legendary_by_type.values, hue=legendary_by_type.index, palette="Set3", legend=False)
plt.title("Количество легендарных покемонов по типам")
plt.xlabel("Тип покемона")
plt.ylabel("Количество")
plt.xticks(rotation=90)
plt.show()

# График средней силы по типам для легендарных покемонов
legendary_types = bst_by_type[1].dropna().sort_values(ascending=False)
plt.figure(figsize=(12, 7))
sns.barplot(x=legendary_types.index, y=legendary_types.values, hue=legendary_types.index, palette="coolwarm", legend=False)
plt.title("Средняя сила легендарных покемонов по типам")
plt.xlabel("Тип покемона")
plt.ylabel("Средний BST")
plt.xticks(rotation=90)
plt.show()

"""**Выводы:**
- Наибольшее количество легендарных покемонов встречается среди типов **Dragon**, **Psychic** и **Water**.
- Некоторые типы, такие как **Poison** и **Fighting**, не имеют легендарных покемонов.
"""

# ---5. Средние характеристики по типам и поколениям---

# Средние характеристики для покемонов по типам
avg_by_type = df.groupby("type1")[["hp", "attack", "defense", "sp_attack", "sp_defense", "speed"]].mean()
avg_by_type = avg_by_type.sort_values(by="attack", ascending=False)

# Средние характеристики для покемонов по поколениям
avg_by_gen = df.groupby("generation")[["hp", "attack", "defense", "sp_attack", "sp_defense", "speed"]].mean()

# Графики для средних характеристик по типам
plt.figure(figsize=(12, 7))
sns.barplot(x=avg_by_type.index, y=avg_by_type["attack"], hue=avg_by_type.index, palette="viridis")
plt.title("Средняя Атака по типам покемонов")
plt.xlabel("Тип покемона")
plt.ylabel("Средняя атака")
plt.xticks(rotation=90)
plt.show()

# Графики для средних характеристик по поколениям
plt.figure(figsize=(12, 7))
sns.lineplot(data=avg_by_gen)
plt.title("Средние характеристики по поколениям")
plt.xlabel("Поколение")
plt.ylabel("Среднее значение характеристик")
plt.legend(["HP", "Атака", "Защита", "Sp. Атака", "Sp. Защита", "Скорость"])
plt.show()

# Графики для средних характеристик по поколениям и легендарности
plt.figure(figsize=(12, 7))
sns.heatmap(bst_by_generation, annot=True, cmap="Blues", fmt=".1f")
plt.title("Средняя характеристик покемонов по поколениям и легендарности")
plt.ylabel("Поколение")
plt.xlabel("Тип покемона (Обычные / Легендарные)")
plt.show()

"""**Выводы по графику "Средняя Атака по типам покемонов":**
- Тепловая карта демонстрирует, что в целом **легендарные покемоны** имеют значительно более высокие значения BST, особенно в 3-м и 6-м поколениях.
- Средний показатель силы для обычных покемонов более стабильный, тогда как у легендарных он варьируется.

**Выводы "Средняя сила покемонов по поколениям и легендарности":**
- В 3-м поколении легендарные покемоны достигают максимума по мощности 666 BST.
- В 7-м поколении легендарные покемоны немного слабее, что может быть связано с изменениями в механике игры.
- Среднее значение BST для обычных покемонов остается стабильным, тогда как у легендарных наблюдается значительная вариативность.
"""

# --- 6. Связь характеристик с ростом и весом ---

# Корреляция между характеристиками и ростом/весом
correlation_with_weight = df[["attack", "defense", "sp_attack", "sp_defense", "speed", "weight_kg"]].corr()
correlation_with_height = df[["attack", "defense", "sp_attack", "sp_defense", "speed", "height_m"]].corr()

# Тепловая карта корреляции с весом
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_with_weight, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Корреляция характеристик с весом")
plt.show()

# График связи характеристик и веса покемонов
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="weight_kg", y="BST", hue="is_legendary", palette="coolwarm", alpha=0.7)
plt.title("Связь веса покемонов и их силы (BST)")
plt.xlabel("Вес (кг)")
plt.ylabel("Сумма базовых характеристик (BST)")
plt.show()
# Тепловая карта корреляции с ростом
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_with_height, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Корреляция характеристик с ростом")
plt.show()

#График связи характеристик и роста
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x="height_m", y="BST", hue="is_legendary", palette="coolwarm", alpha=0.7)
plt.title("Связь роста покемонов и их силы (BST)")
plt.xlabel("Рост (м)")
plt.ylabel("Сумма базовых характеристик (BST)")
plt.show()

"""**Выводы по графику 6:**
- На графике видно, что рост покемонов не сильно коррелирует с их силой (BST), но среди высоких покемонов можно встретить как слабых, так и сильных.
- Легендарные покемоны чаще всего обладают высоким BST независимо от роста.
"""

# --- 7. Важность характеристик для предсказания силы покемона ---

# Используем линейную регрессию для предсказания BST
features = ["hp", "attack", "defense", "sp_attack", "sp_defense", "speed"]
X = df[features]
y = df["BST"]

# Линейная регрессия
model = LinearRegression()
model.fit(X, y)

# Важность признаков
importance = pd.DataFrame({
    "Feature": features,
    "Coefficient": model.coef_
}).sort_values(by="Coefficient", ascending=False)

# Добавляем абсолютные значения коэффициентов для наглядности
importance["Absolute Coefficient"] = np.abs(importance["Coefficient"])

print("\nВажность характеристик для предсказания силы (BST):\n", importance)

# График важности характеристик
plt.figure(figsize=(12, 6))
sns.barplot(data=importance, x="Feature", y="Absolute Coefficient", hue="Feature", palette="viridis", legend=False)
plt.title("Важность характеристик для предсказания BST", fontsize=16)
plt.xlabel("Характеристика", fontsize=14)
plt.ylabel("Абсолютное значение коэффициента", fontsize=14)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)

# Добавляем значения коэффициентов на график
for i, row in importance.iterrows():
    plt.text(
        i,  # Позиция по оси X (индекс столбца)
        row["Absolute Coefficient"] + 0.02,  # Позиция по оси Y (немного выше столбца)
        f"{row['Coefficient']:.2f}",  # Значение коэффициента с округлением до 2 знаков
        ha="center",  # Горизонтальное выравнивание по центру
        fontsize=12,  # Размер шрифта
        color="black"  # Цвет текста
    )

plt.tight_layout()
plt.show()

# Корреляция между характеристиками и BST
correlation_with_bst = df[features + ["BST"]].corr()

# Тепловая карта корреляции
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_with_height, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Корреляция характеристик с BST", fontsize=16)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.show()

"""**Выводы по графику 7:**
- Визуально видно, что вес покемонов также не является идеальным предсказателем их силы.
- Однако среди тяжёлых покемонов можно встретить как очень сильных (например, легендарных), так и слабых.
"""